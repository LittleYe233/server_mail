#!/usr/bin/env python3

import getpass
import mimetypes
import smtplib

from email.message import EmailMessage
from email.headerregistry import Address
from email.utils import make_msgid
from io import IOBase
from typing import Iterable, List, Literal, NamedTuple, Union

import markdown2
import minify_html

BUILTIN_STYLE = '''
h1 { text-align: center; }
table { text-align: center; border-collapse: collapse; }
thead { display: none; }
td:first-child { background-color: #59c1ff; color: white; }
td { padding: 10px; }
.msg-level-debug { color: #008f6d; }
.msg-level-info { color: #19d72e; }
.msg-level-warn { color: #ffbf00; }
.msg-level-fatal, .msg-level-critical { color: red; }

/***********************************************************************
 * Generated by `pygmentize -f html -S solarized-light -a .codehilite` *
 ***********************************************************************/

pre { line-height: 125%; }
td.linenos .normal { color: #93a1a1; background-color: #eee8d5; padding-left: 5px; padding-right: 5px; }
span.linenos { color: #93a1a1; background-color: #eee8d5; padding-left: 5px; padding-right: 5px; }
td.linenos .special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
span.linenos.special { color: #000000; background-color: #ffffc0; padding-left: 5px; padding-right: 5px; }
.codehilite .hll { background-color: #eee8d5 }
.codehilite { background: #fdf6e3; color: #657b83 }
.codehilite .c { color: #93a1a1; font-style: italic } /* Comment */
.codehilite .err { color: #657b83; background-color: #dc322f } /* Error */
.codehilite .esc { color: #657b83 } /* Escape */
.codehilite .g { color: #657b83 } /* Generic */
.codehilite .k { color: #859900 } /* Keyword */
.codehilite .l { color: #657b83 } /* Literal */
.codehilite .n { color: #657b83 } /* Name */
.codehilite .o { color: #93a1a1 } /* Operator */
.codehilite .x { color: #657b83 } /* Other */
.codehilite .p { color: #657b83 } /* Punctuation */
.codehilite .ch { color: #93a1a1; font-style: italic } /* Comment.Hashbang */
.codehilite .cm { color: #93a1a1; font-style: italic } /* Comment.Multiline */
.codehilite .cp { color: #d33682 } /* Comment.Preproc */
.codehilite .cpf { color: #93a1a1 } /* Comment.PreprocFile */
.codehilite .c1 { color: #93a1a1; font-style: italic } /* Comment.Single */
.codehilite .cs { color: #93a1a1; font-style: italic } /* Comment.Special */
.codehilite .gd { color: #dc322f } /* Generic.Deleted */
.codehilite .ge { color: #657b83; font-style: italic } /* Generic.Emph */
.codehilite .gr { color: #dc322f } /* Generic.Error */
.codehilite .gh { color: #657b83; font-weight: bold } /* Generic.Heading */
.codehilite .gi { color: #859900 } /* Generic.Inserted */
.codehilite .go { color: #657b83 } /* Generic.Output */
.codehilite .gp { color: #268bd2; font-weight: bold } /* Generic.Prompt */
.codehilite .gs { color: #657b83; font-weight: bold } /* Generic.Strong */
.codehilite .gu { color: #657b83; text-decoration: underline } /* Generic.Subheading */
.codehilite .gt { color: #268bd2 } /* Generic.Traceback */
.codehilite .kc { color: #2aa198 } /* Keyword.Constant */
.codehilite .kd { color: #2aa198 } /* Keyword.Declaration */
.codehilite .kn { color: #cb4b16 } /* Keyword.Namespace */
.codehilite .kp { color: #859900 } /* Keyword.Pseudo */
.codehilite .kr { color: #859900 } /* Keyword.Reserved */
.codehilite .kt { color: #b58900 } /* Keyword.Type */
.codehilite .ld { color: #657b83 } /* Literal.Date */
.codehilite .m { color: #2aa198 } /* Literal.Number */
.codehilite .s { color: #2aa198 } /* Literal.String */
.codehilite .na { color: #657b83 } /* Name.Attribute */
.codehilite .nb { color: #268bd2 } /* Name.Builtin */
.codehilite .nc { color: #268bd2 } /* Name.Class */
.codehilite .no { color: #268bd2 } /* Name.Constant */
.codehilite .nd { color: #268bd2 } /* Name.Decorator */
.codehilite .ni { color: #268bd2 } /* Name.Entity */
.codehilite .ne { color: #268bd2 } /* Name.Exception */
.codehilite .nf { color: #268bd2 } /* Name.Function */
.codehilite .nl { color: #268bd2 } /* Name.Label */
.codehilite .nn { color: #268bd2 } /* Name.Namespace */
.codehilite .nx { color: #657b83 } /* Name.Other */
.codehilite .py { color: #657b83 } /* Name.Property */
.codehilite .nt { color: #268bd2 } /* Name.Tag */
.codehilite .nv { color: #268bd2 } /* Name.Variable */
.codehilite .ow { color: #859900 } /* Operator.Word */
.codehilite .w { color: #657b83 } /* Text.Whitespace */
.codehilite .mb { color: #2aa198 } /* Literal.Number.Bin */
.codehilite .mf { color: #2aa198 } /* Literal.Number.Float */
.codehilite .mh { color: #2aa198 } /* Literal.Number.Hex */
.codehilite .mi { color: #2aa198 } /* Literal.Number.Integer */
.codehilite .mo { color: #2aa198 } /* Literal.Number.Oct */
.codehilite .sa { color: #2aa198 } /* Literal.String.Affix */
.codehilite .sb { color: #2aa198 } /* Literal.String.Backtick */
.codehilite .sc { color: #2aa198 } /* Literal.String.Char */
.codehilite .dl { color: #2aa198 } /* Literal.String.Delimiter */
.codehilite .sd { color: #93a1a1 } /* Literal.String.Doc */
.codehilite .s2 { color: #2aa198 } /* Literal.String.Double */
.codehilite .se { color: #2aa198 } /* Literal.String.Escape */
.codehilite .sh { color: #2aa198 } /* Literal.String.Heredoc */
.codehilite .si { color: #2aa198 } /* Literal.String.Interpol */
.codehilite .sx { color: #2aa198 } /* Literal.String.Other */
.codehilite .sr { color: #cb4b16 } /* Literal.String.Regex */
.codehilite .s1 { color: #2aa198 } /* Literal.String.Single */
.codehilite .ss { color: #2aa198 } /* Literal.String.Symbol */
.codehilite .bp { color: #268bd2 } /* Name.Builtin.Pseudo */
.codehilite .fm { color: #268bd2 } /* Name.Function.Magic */
.codehilite .vc { color: #268bd2 } /* Name.Variable.Class */
.codehilite .vg { color: #268bd2 } /* Name.Variable.Global */
.codehilite .vi { color: #268bd2 } /* Name.Variable.Instance */
.codehilite .vm { color: #268bd2 } /* Name.Variable.Magic */
.codehilite .il { color: #2aa198 } /* Literal.Number.Integer.Long */
'''

def minify_content(content: str) -> str:

    return minify_html.minify(
        content,
        minify_css=True,
        minify_js=True,
        remove_bangs=True,
        remove_processing_instructions=True
    )

def compose_content(content_md: str, style: str) -> str:

    return f'<style>{style}</style>' + markdown2.markdown(
        content_md,
        extras=['code-friendly', 'fenced-code-blocks', 'tables']
    )

class Attachment(NamedTuple):

    data: Union[bytes, IOBase]
    maintype: Union[str, None] = None
    subtype: Union[str, None] = None
    filename: Union[str, None] = None


def normalize_address(addr: Union[str, Address]) -> Address:

    if isinstance(addr, Address):
        return addr
    elif isinstance(addr, str):
        if '@' in addr:
            username, domain = addr.split('@', 1)
        else:
            username = getpass.getuser()
            domain = addr
        return Address(username, username, domain)
    else:
        raise TypeError('expected str or email.headerregistry.Address type')


def compose_email(
    subject: str,
    recipients: Iterable[Union[Address, str]],
    content: str,
    content_type: Literal['plain', 'html'] = 'plain',
    msg_level: Literal['DEBUG', 'INFO', 'WARN', 'FATAL', 'CRITICAL'] = 'INFO',
    sender: Union[Address, str] = 'localhost',
    # attachments: Union[List[Union[bytes, IOBase, Attachment]], None] = None
) -> EmailMessage:

    msg = EmailMessage()
    msg['Subject'] = f'[{msg_level}]{subject}'
    msg['From'] = normalize_address(sender)
    msg['To'] = tuple(map(normalize_address, recipients))
    msg.set_content(content, subtype=content_type)

    return msg


def send_email(
    username: str,
    password: str,
    msg: EmailMessage,
    sender: Union[Address, str] = 'localhost'
):

    sender = normalize_address(sender)
    with smtplib.SMTP_SSL(sender.domain) as smtp:
        smtp.login(username, password)
        smtp.send_message(msg)
